#!/bin/sh

## -------------------------------------------------------------------
##
## Copyright (c) 2018 HashiCorp. All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------

tfe_pullvars_description () (
    echo "Get one or more variables and values from a TFE workspace"
)

tfe_pullvars_help () (
# Be sure to include the common options with tfe_usage_args
cat << EOF

SYNOPSIS
 tfe pullvars -name <ORGANIZATION>/<WORKSPACE> [OPTIONS]

DESCRIPTION
 Get variables from a Terraform Enterprise workspace and write them to stdout.
 Displays Terraform variables in tfvars format and environment variables in
 shell format.

 By default, this command returns all Terraform variables. You can output all
 environment variables with '-env true', or output specific variables with the
 -var or -env-var options.

OPTIONS
$(tfe_usage_args)

 -var <NAME>          Get a Terraform variable from the Terraform Enterprise
                      workspace. This argument can be specified multiple
                      times.

 -env-var <NAME>      Get an environment variable from the Terraform
                      Enterprise workspace. This argument can be specified
                      multiple times.

 -env <BOOLEAN>       Whether to get all environment variables instead of
                      Terraform variables. Defaults to false.

NOTES
 Sensitive variable names are listed with empty values, since sensitive values
 can't be retrieved.

 The curl and jq commands are required.

EOF
)

tfe_pullvars () (
    # List of vars to retrieve
    vars=

    # List of env vars to retrieve
    env_vars=

    # Whether to list all env vars instead of tf vars
    env=false

    # Check for required standard options
    if ! check_required; then
        return 1
    fi

    # Parse options

    while [ -n "$1" ]; do
        # If this is a common option it has already been parsed. Skip it and
        # its value.
        if is_common_opt "$1"; then
            shift
            shift
            continue
        fi

        case "$1" in
            -var)
                # -var can be specified multiple times
                new_var="$(assign_arg "$1" "$2")"
                vars="$(append "$vars" "$new_var")"
                ;;
            -env-var)
                # -env-var can be specified multiple times
                new_var="$(assign_arg "$1" "$2")"
                env_vars="$(append "$env_vars" "$new_var")"
                ;;
            -env)
                case "$2" in
                    true)
                        env=true
                        ;;
                    false)
                        env=false
                        ;;
                    *)
                        echoerr "-env should be true or false"
                        return 1
                        ;;
                esac
                ;;
            *)
                echoerr "Unknown option $1"
                return 1
                ;;
        esac
        [ -n "$1" ] && shift
        [ -n "$1" ] && shift
    done

    # Handle conflicting options
    if [ "$env" = true ] && ( [ -n "$vars" ] || [ -n "$env_vars" ] ); then
        echoerr "-env true cannot be specified along with -var and/or -env-var"
        return 1
    fi

    # request template
    url="$tfe_address/api/v2/vars?filter%5Borganization%5D%5Bname%5D=$tfe_org&filter%5Bworkspace%5D%5Bname%5D=$tfe_workspace"

    echodebug "[DEBUG] API list variables URL:"
    echodebug "$url"

    # API call to get all of the variables
    echodebug "[DEBUG] API request for variable list:"
    if ! var_get_resp="$(tfe_api_call $url)"; then
        echoerr "Error listing variables"
        return 1
    fi

    vars_retval=0
    tfevar=

    if [ -n "$vars" ]; then
        for v in $vars; do
            # Get this tf var out of the variable list with jq
            tfevar="$(printf "%s" "$var_get_resp" | jq -r --arg var "$v" '.data[]
                | select(.attributes.category == "terraform")
                | select(.attributes.key == $var)
                | [
                    .attributes.key + " = ",
                    (if .attributes.hcl == false or .attributes.sensitive == true then "\"" else empty end),
                    .attributes.value,
                    (if .attributes.hcl == false or .attributes.sensitive == true then "\"" else empty end)
                  ]
                | join("")')"

            if [ -z "$tfevar" ]; then
                echoerr "Variable $v not found"
                vars_retval=1
            else
                echo "$tfevar"
            fi
        done
    fi

    if [ -n "$env_vars" ]; then
        for v in $env_vars; do
            # Get this env var out of the variable list with jq
            tfevar="$(printf "%s" "$var_get_resp" | jq -r --arg var "$v" '.data[]
                | select(.attributes.category == "env")
                | select(.attributes.key == $var)
                | .attributes.key + "=\"" + .attributes.value + "\""')"

            if [ -z "$tfevar" ]; then
                echoerr "Variable $v not found"
                vars_retval=1
            else
                echo "$tfevar"
            fi
        done
    fi

    if [ -n "$vars" ] || [ -n "$env_vars" ]; then
        return $vars_retval
    fi

    # Didn't retrieve a specific list of vars so
    # either list all tf or all env vars
    terraform_tfvars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
        | select(.attributes.category == "terraform")
        | select(.attributes.sensitive == false)
        | [
            .attributes.key + " = ",
            (if .attributes.hcl == false then
                if .attributes.value | contains("\n") then
                    "<<EOF\n"
                else
                    "\""
                end
            else empty end),
            .attributes.value,
            (if .attributes.hcl == false then
                if .attributes.value | contains("\n") then
                    "\nEOF"
                else
                    "\""
                end
            else empty end),
            "\n"
          ]
        | join("")')"
    if [ 0 -ne $? ]; then
        echoerr "Error parsing API response for Terraform variables"
        return 1
    fi

    sensitive_tfvars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
        | select(.attributes.category == "terraform")
        | select(.attributes.sensitive == true)
        | .attributes.key + " = \"\""')"
    if [ 0 -ne $? ]; then
        echoerr "Error parsing API response for sensitive Terraform variables"
        return 1
    fi

    env_vars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
        | select(.attributes.category == "env")
        | select(.attributes.sensitive == false)
        | .attributes.key + "=\"" + .attributes.value + "\""')"
    if [ 0 -ne $? ]; then
        echoerr "Error parsing API response for environment variables"
        return 1
    fi

    sensitive_env_vars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
        | select(.attributes.category == "env")
        | select(.attributes.sensitive == true)
        | .attributes.key + "="')"
    if [ 0 -ne $? ]; then
        echoerr "Error parsing API response for sensitive environment variables"
        return 1
    fi

    # All env vars were requested
    if [ "$env" = true ]; then
        if [ -n "$sensitive_env_vars" ]; then
            echo "$sensitive_env_vars"
        fi

        if [ -n "$env_vars" ]; then
            echo "$env_vars"
        fi

        return 0
    fi

    # All tf vars were requested
    if [ -n "$sensitive_tfvars" ]; then
        echo "$sensitive_tfvars"
    fi

    if [ -n "$terraform_tfvars" ]; then
        echo "$terraform_tfvars"
    fi
)
