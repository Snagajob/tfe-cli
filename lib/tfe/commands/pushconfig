#!/bin/sh

## -------------------------------------------------------------------
##
## Copyright (c) 2018 HashiCorp. All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------

list_vcs () {
    git ls-files
}

list_files () {
    find -L . -type f | grep -E -v '^\.$|.git|.terraform'
}

list_modules () {
    find -L .terraform/modules -type f |  grep -E -v '^\.$|\.git'
}

list_hardlinked () {
    find -L . -type f -links +1 | grep -E -v '^\.$|.git|.terraform' | cut -c 3-
}

list_not_hardlinked () {
    find -L . -type f -links 1 | grep -E -v '^\.$|.git|.terraform' | cut -c 3-
}

list_hardlinked_modules () {
    find -L .terraform/modules -type f -links +1 |  grep -E -v '^\.$|\.git'
}

list_not_hardlinked_modules () {
    find -L .terraform/modules -type f -links 1 |  grep -E -v '^\.$|\.git'
}

# Use GNU tar to archive the current directory
gnutar () {
    echodebug "[DEBUG] Using GNU tar"

    if [ true = $vcs ]; then
        list_vcs > "$tarlist"
    else
        list_files > "$tarlist"
    fi

    if [ true = $upload_modules ]; then
        list_modules >> "$tarlist"
    fi

    tar ${tfe_tar_verbose}zcfh \
        "$1" -T "$tarlist" --hard-dereference
}

# Use BSD tar to archive the current directory
bsdtar () {
    echodebug "[DEBUG] Using BSD tar"

    vcslist="$TMPDIR/vcslist-$(date +%s)"
    hardlinklist="$TMPDIR/hardlinklist-$(date +%s)"

    hardlinks="$(list_hardlinked | sort)"
    echo "$hardlinks" > "$hardlinklist"

    if [ true = $vcs ]; then
        list_vcs | sort > "$vcslist"
        hardlinks="$(comm -12 "$vcslist" "$hardlinklist")"
    fi

    if [ -z "$hardlinks" ]; then
        # If there are no hardlinks then the job is easy and
        # the same as GNU tar without --hard-dereference
        echodebug "[DEBUG] No hardlinks to manually resolve"
        if [ true = $vcs ]; then
            list_vcs > "$tarlist"
        else
            list_files > "$tarlist"
        fi

        if [ true = $upload_modules ]; then
            list_modules >> "$tarlist"
        fi

        tar ${tfe_tar_verbose}zcfh \
            "$1" -T "$tarlist"
    else
        # If there are hardlinks they have to be added separately
        # to the archive one by one
        echodebug "[DEBUG] Resolving hardlinks manually"

        if [ true = $vcs ]; then
            # Tracked hardlinks are in the hard link list already.
            # Need tracked non-hardlinks to tar.
            comm -23 "$vcslist" "$hardlinklist" > "$tarlist"
        else
            # Need all of the hardlinks, including ones that might be
            # in the modules dir if uploading modules
            list_hardlinked > "$hardlinklist"

            # Need the non-hardlinks to tar
            list_not_hardlinked > "$tarlist"
        fi

        if [ true = $upload_modules ]; then
            list_hardlinked_modules >> "$hardlinklist"
            list_not_hardlinked_modules >> "$tarlist"
        fi

        # Start by creating an uncompressed tar of the non-hardlinks
        echodebug "[DEBUG] Creating initial tar"
        tar ${tfe_tar_verbose}cfh "${1%.gz}" -T "$tarlist"

        # Add each hardlink to the archive individually
        echodebug "[DEBUG] Adding each hardlink"
        cat "$hardlinklist" | while read -r hl; do
            tar ${tfe_tar_verbose}rf "${1%.gz}" "$hl"
        done

        # Compress the completed archive
        echodebug "[DEBUG] Compressing ${1%.gz}"
        gzip "${1%.gz}"
    fi
}

tfe_pushconfig_description () (
    echo "Upload a Terraform config to a TFE workspace and begin a run"
)

tfe_pushconfig_help () (
# Be sure to include the common options with tfe_usage_args
cat << EOF
SYNOPSIS
 tfe pushconfig -name <ORGANIZATION>/<WORKSPACE> [OPTIONS] [CONFIG_DIR]

DESCRIPTION
 Upload a Terraform configuration to a Terraform Enterprise workspace
 and begin a run.

OPTIONS
$(tfe_usage_args)

 -upload-modules <BOOLEAN>
                      If true (default), then the modules are locked at
                      their current checkout and uploaded completely. This
                      prevents modules from being retrieved with "terraform
                      init". This does not lock provider versions; use the
                      "version" parameter in provider blocks in the
                      configuration to accomplish that.

 -vcs <BOOLEAN>       If true (default), push will upload only files
                      committed to your VCS, if detected. Currently supports
                      git repositories.

 -poll <SECONDS>      Number of seconds to wait between polling the submitted
                      run for a non-active status. Defaults to 0 (no polling).

NOTES
 The curl and jq commands are required.

EOF
)

tfe_pushconfig () (
    upload_modules=true
    vcs=true
    config_dir=.
    poll_run=0

    # Check for additional required commands.
    if [ -z "$(command -v tar)" ]; then
        echoerr "The tar command must be installed"
        return 1
    fi

    if tar --version | grep GNU; then
        tarcmd=gnutar
    else
        tarcmd=bsdtar

        # Using bsdtar might result in a two step process where first the
        # tar is created and then compressed, which requires the separate
        # gzip command. It may not be strictly required under all
        # circumstances but it's probably better to error earlier rather
        # than later, considering how common the gzip command is.
        if [ -z "$(command -v gzip)" ]; then
            echoerr "The gzip command must be installed"
            return 1
        fi
    fi

    # Parse options

    while [ -n "$1" ]; do
        case "$1" in
            help|-h|-help|--help)
                usage
                ;;
            -upload-modules)
                case "$2" in
                    true)
                        upload_modules=true
                        ;;
                    false)
                        upload_modules=false
                        ;;
                    *)
                        echoerr "-upload-modules should be true or false"
                        return 1
                        ;;
                esac
                ;;
            -vcs)
                case "$2" in
                    true)
                        vcs=true
                        ;;
                    false)
                        vcs=false
                        ;;
                    *)
                        echoerr "-vcs should be true or false"
                        return 1
                        ;;
                esac
                ;;
            -poll)
                if [ "$2" -eq "$2" ] >/dev/null 2>&1; then
                    poll_run=$(assign_arg "$1" "$2")
                else
                    echoerr "-poll must be an integer"
                    return 1
                fi
                ;;
            *)
                # Shouldn't get here until the last option, the optional
                # config directory
                if [ $# -gt 1 ]; then
                    echoerr "Trailing options following config directory $1"
                    return 1
                fi

                config_dir=$1
                ;;
        esac
        [ -n "$1" ] && shift
        [ -n "$1" ] && shift
    done

    # Check for additional required commands.
    if [ -z "$(command -v git)" ]; then
        echoerr "The git command is required for VCS detection"
        return 1
    fi

    # Gets the workspace ID given the organization name and workspace name
    workspace_id="$( (
        set -e
        echodebug "[DEBUG] Requesting workspace information for $tfe_org/$tfe_workspace"

        url="$tfe_address/api/v2/organizations/$tfe_org/workspaces/$tfe_workspace"
        workspace_id_resp="$(tfe_api_call "$url")"
        echodebug "[DEBUG] Workspace ID response:"
        echodebug "$workspace_id_resp"

        workspace_id="$(printf "%s" "$workspace_id_resp" | jq -r '.data.id')"
        echodebug "[DEBUG] Workspace ID: $workspace_id"

        test -n "$workspace_id"
        echo "$workspace_id"
    ) 2>&3 )"

    if [ 0 -ne $? ]; then
        echoerr "Error obtaining workspace ID"
        return 1
    fi

    # Creates a tar.gz of the VCS or directory with the configuration

    echodebug "[DEBUG] Creating file for upload"
    config_payload="$TMPDIR/content-$(date +%s).tar.gz"
    tarlist="$TMPDIR/tarlist-$(date +%s)"

    if ! (
        set -e

        echodebug "[DEBUG] Entering dir $config_dir"
        cd "$config_dir"

        if [ "$vcs" = true ]; then
            # VCS detection was requested so it must actually be present
            if ! git status 2>&1 >/dev/null; then
                echoerr "VCS not present in $config_dir"
                echoerr "Disable VCS detection with -vcs false"
                return 1
            fi
            echodebug "[DEBUG] tar: Uploading vcs tracked files"
            echodebug "[DEBUG] excluding any plugins"
        else
            # No VCS, upload this whole dir
            echodebug "[DEBUG] tar: no vcs detected. Uploading all of $PWD"
            tar ${tfe_tar_verbose}zcfh "$config_payload" .
            echodebug "[DEBUG] tar: copying tar file to $PWD"
            cp "$config_payload" /tmp/
            echodebug "[DEBUG] tar: Uploading all of $PWD"
            echodebug "[DEBUG] excluding VCS files and any plugins"
        fi

        # If there are modules we might want to upload them.
        has_modules="$([ -d .terraform/modules ] && echo true || echo false)"
        echodebug "[DEBUG] Has .terraform/modules: $has_modules"

        $tarcmd "$config_payload" $vcs $upload_modules
    ) 2>&3; then
        echoerr "Error creating config archive payload"
        return 1
    fi

    echo "Uploading Terraform config..."

    echodebug "[DEBUG] Creating a new config version for $tfe_workspace"

    # The JSON Payload used to create the new configuration version
    config_ver_payload='{"data":{"type":"configuration-version"}}'

    echodebug "[DEBUG] Creating config version in workspace $workspace_id"

    # Creates the configuration version and extractes the upload-url
    url=$tfe_address/api/v2/workspaces/$workspace_id/configuration-versions

    echodebug "[DEBUG] URL: $url"

    upload_url_resp="$(tfe_api_call -d "$config_ver_payload" $url)"
    if [ 0 -ne $? ]; then
        echoerr "Error creating config version"
        cleanup "$config_payload" "$tarlist"
        return 1
    fi

    echodebug "[DEBUG] Upload URL response:"
    echodebug "$upload_url_resp"

    config_id="$(printf "%s" "$upload_url_resp" | jq -r '.data.id')"
    if [ 0 -ne $? ]; then
        echoerr "Error parsing API response for config ID"
        cleanup "$config_payload" "$tarlist"
        return 1
    fi
    echodebug "[DEBUG] Config ID: $config_id"

    # Perform the upload of the config archive to the upload URL
    if ! (
        set -e
        url="$(printf "%s" "$upload_url_resp" | jq -r '.data.attributes."upload-url"')"
        echodebug "[DEBUG] Upload URL: $url"
        echodebug "[DEBUG] Uploading content to upload URL"

        upload_config_resp="$(curl -f $tfe_curl_silent -X PUT --data-binary "@$config_payload" ${url})"

        echodebug "[DEBUG] Upload config response:"
        echodebug "$upload_config_resp"
    ) 2>&3; then
        echoerr "Error uploading config archive"
        cleanup "$config_payload" "$tarlist"
        return 1
    fi

    cleanup "$config_payload" "$tarlist"

    # Get the run ID using the config ID obtained earlier.
    # Try to get it 10 times with a 1s sleep between tries.
    try=0
    while [ $try -lt 10 ] && [ -z "$run_id" ]; do
        try=$(( try + 1 ))

        echodebug "[DEBUG] Polling for run ID. Attempt $try"

        url=$tfe_address/api/v2/workspaces/$workspace_id/runs
        run_check_resp="$(tfe_api_call $url)"

        echodebug "[DEBUG] Run check response:"
        echodebug "$run_check_resp"

        run_id="$(printf "%s" "$run_check_resp" | jq -r '.data[] | select(.relationships."configuration-version".data.id == "'$config_id'") | .id')"

        echodebug "[DEBUG] Run ID: $run_id"

        if [ -z "$run_id" ]; then
            sleep 1
        fi
    done

    if [ -z "$run_id" ]; then
        echoerr "Error obtaining run ID"
        return 1
    fi

    echo "Run $run_id submitted with config $config_id on $tfe_org/$tfe_workspace"

    if [ 0 -eq "$poll_run" ]; then
        return 0
    fi

    # Repeatedly poll the system every N seconds specified with -poll to get
    # the run status until it reaches a non-active status. By default -poll is
    # 0 and there is no polling.
    if ! (
        set -e
        run_status=pending
        lock_id=

        # Go until we don't see one of these states
        while [ pending = "$run_status"   ] ||
              [ planning = "$run_status"  ] ||
              [ applying = "$run_status"  ] ||
              [ confirmed = "$run_status" ]; do
            # if the workspace was determined to be locked in the previous
            # poll, don't delay getting the final status and exiting.
            if [ true != "$workspace_locked" ]; then
                sleep $poll_run
            fi

            url=$tfe_address/api/v2/workspaces/$workspace_id/runs
            poll_run_resp=$(tfe_api_call $url)

            echodebug "[DEBUG] Poll run response:"
            echodebug "$poll_run_resp"

            run_status="$(printf "%s" "$poll_run_resp" | jq -r '.data[] | select(.id == "'$run_id'") | .attributes.status')"
            [ 0 -ne $? ] && continue

            echo "$run_status"

            echodebug "[DEBUG] Requesting workspace info for $tfe_org/$tfe_workspace"
            url="$tfe_address/api/v2/organizations/$tfe_org/workspaces/$tfe_workspace"
            workspace_info_resp="$(tfe_api_call "$url")"

            echodebug "[DEBUG] Workspace info response:"
            echodebug "$workspace_info_resp"

            workspace_locked="$(printf "%s" "$workspace_info_resp" | jq -r '.data.attributes.locked')"

            if [ true = "$workspace_locked" ]; then
                lock_id="$(printf "%s" "$workspace_info_resp" | jq -r '.data.relationships."locked-by".data.id')"
                if [ "$lock_id" != "$run_id" ]; then
                    echo "locked by $lock_id"
                    return 0
                fi
            fi
        done
    ) 2>&3; then
        echoerr "Error polling run"
        return 1
    fi
)
