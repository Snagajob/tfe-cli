#!/bin/bash

## -------------------------------------------------------------------
##
## Copyright (c) 2018 HashiCorp. All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------
tf_modules_dir=".terraform/modules"

# Archive the right files depending on whether a VCS is being used or not
tarfiles () {
    if [ true = "$1" ]; then
        git ls-files
    else
        find . -type f | grep -E -v '^\.$|.git|.terraform|.cli|.py|.md|.sh'
    fi
}

tarLinkedModules () {
    links=$(find "$tf_modules_dir" -type l)

    while read -r line; do
        for i in $(ls ${line}); do
            echo $line/$i
        done
    done <<< "$links"
}

tarModules () {
    if [ true = "$1" ]; then
        git ls-files
    else
        find "$tf_modules_dir" -type f | grep -E -v '^.*\.git.*$'
    fi
}

tfe_pushconfig_description () (
    echo "Upload a Terraform config to a TFE workspace and begin a run"
)

tfe_pushconfig_help () (
# Be sure to include the common options with tfe_usage_args
cat << EOF
SYNOPSIS
 tfe pushconfig -name <ORGANIZATION>/<WORKSPACE> [OPTIONS] [CONFIG_DIR]

DESCRIPTION
 Upload a Terraform configuration to a Terraform Enterprise workspace
 and begin a run.

OPTIONS
$(tfe_usage_args)

 -upload-modules <BOOLEAN>
                      If true (default), then the modules are locked at
                      their current checkout and uploaded completely. This
                      prevents modules from being retrieved with "terraform
                      init". This does not lock provider versions; use the
                      "version" parameter in provider blocks in the
                      configuration to accomplish that.

 -vcs <BOOLEAN>       If true (default), push will upload only files
                      committed to your VCS, if detected. Currently supports
                      git repositories.

 -poll <SECONDS>      Number of seconds to wait between polling the submitted
                      run for a non-active status. Defaults to 0 (no polling).

NOTES
 The curl and jq commands are required.

EOF
)

tfe_pushconfig () (
    upload_modules=true
    vcs=true
    config_dir=.
    poll_run=0

    # Parse options

    while [ -n "$1" ]; do
        case "$1" in
            help|-h|-help|--help)
                usage
                ;;
            -upload-modules)
                case "$2" in
                    true)
                        upload_modules=true
                        ;;
                    false)
                        upload_modules=false
                        ;;
                    *)
                        echoerr "-upload-modules should be true or false"
                        exit 1
                        ;;
                esac
                ;;
            -vcs)
                case "$2" in
                    true)
                        vcs=true
                        ;;
                    false)
                        vcs=false
                        ;;
                    *)
                        echoerr "-vcs should be true or false"
                        exit 1
                        ;;
                esac
                ;;
            -poll)
                if [ "$2" -eq "$2" ] >/dev/null 2>&1; then
                    poll_run=$(assign_arg "$1" "$2")
                else
                    echoerr "-poll must be an integer"
                    exit 1
                fi
                ;;
            *)
                # Shouldn't get here until the last option, the optional
                # config directory
                if [ $# -gt 1 ]; then
                    echoerr "Trailing options following config directory $1"
                    exit 1
                fi

                config_dir=$1
                ;;
        esac
        [ -n "$1" ] && shift
        [ -n "$1" ] && shift
    done

    # Gets the workspace ID given the organization name and workspace name
    workspace_id="$( (
        set -e
        echodebug "[DEBUG] Requesting workspace information for $tfe_org/$tfe_workspace"

        url="$tfe_address/api/v2/organizations/$tfe_org/workspaces/$tfe_workspace"
        workspace_id_resp="$(tfe_api_call "$url")"
        echodebug "[DEBUG] Workspace ID response:"
        echodebug "$workspace_id_resp"

        workspace_id="$(printf "%s" "$workspace_id_resp" | jq -r '.data.id')"
        echodebug "[DEBUG] Workspace ID: $workspace_id"

        test -n "$workspace_id"
        echo "$workspace_id"
    ) 2>&3 )"
    [ 0 -ne $? ] && { echoerr "Error obtaining workspace ID"; exit 1; }

    # Creates a tar.gz of the VCS or directory with the configuration

    echodebug "[DEBUG] Creating file for upload"
    config_payload="$TMPDIR/content-$(date +%s).tar.gz"

    (
        set -e

        echodebug "[DEBUG] Entering dir $config_dir"
        cd "$config_dir"

        if [ "$vcs" = true ]; then
            # VCS detection was requested so it must actually be present
            if ! git status 2>&1 >/dev/null; then
                echoerr "VCS not present in $config_dir"
                echoerr "Disable VCS detection with -vcs false"
                return 1
            fi
            echodebug "[DEBUG] tar: Uploading vcs tracked files"
            echodebug "[DEBUG] excluding any plugins"
        else
            echodebug "[DEBUG] tar: Uploading all of $PWD"
            echodebug "[DEBUG] excluding VCS files and any plugins"
        fi


        # If there is a state file or modules we might want to upload them.

        tf_state_file=".terraform/terraform.tfstate"
        has_tf_state="$([ -f "$tf_state_file" ] && echo true || echo false)"
        echodebug "[DEBUG] Has $tf_state_file - $has_tf_state"

        # debugging by never including .terraform/terraform.tfstate
        has_tf_state=false

        has_modules="$([ -d "$tf_modules_dir" ] && echo true || echo false)"
        echodebug "[DEBUG] Has $tf_modules_dir - $has_modules"

        # tar is extremely sensitive to being passed empty values so this case
        # statement is unfortunately necessary
        echodebug "[DEBUG] Case ${has_tf_state}${has_modules}${upload_modules}"

        case ${has_tf_state}${has_modules}${upload_modules} in
            # has state, has modules, should upload modules
            truetruetrue)
                echodebug "[DEBUG] tar: state, modules, upload modules"
                tar ${tfe_tar_verbose}zcfh "$config_payload" \
                    $(tarfiles $vcs) \
                    "$tf_state_file" \
                    "$tf_modules_dir"
                ;;
            # has state, has modules, should not upload modules
            truetruefalse)
                echodebug "[DEBUG] tar: state, modules, no upload modules"
                tar ${tfe_tar_verbose}zcfh "$config_payload" \
                    $(tarfiles $vcs) \
                    "$tf_state_file"
                ;;
            # has state, no modules, no modules so don't care about uploading
            truefalse*)
                echodebug "[DEBUG] tar: state, no modules"
                tar ${tfe_tar_verbose}zcfh "$config_payload" \
                    $(tarfiles $vcs) \
                    "$tf_state_file"
                ;;
            # no state, has modules, should upload modules
            falsetruetrue)
                echodebug "[DEBUG] tar: no state, modules, upload modules"
                    tar ${tfe_tar_verbose}zcfh "$config_payload" \
                    $(tarDesired $vcs) \
                    $(tarLinkedModules) \
                    $(tarModules)

                echodebug "[DEBUG] tar: copying tar file to $PWD"
                cp "$config_payload" .
                echodebug "[DEBUG] tar: Uploading all of $PWD"
                ;;
            # no state, no modules, no modules so don't care about uploading
            falsefalse*)
                echodebug "[DEBUG] tar: no state, no modules"
                tar ${tfe_tar_verbose}zcfh "$config_payload" \
                    $(tarfiles $vcs)
                ;;
        esac
    ) 2>&3
    [ 0 -ne $? ] && { echoerr "Error creating config archive payload"; exit 1; }

    echo "Uploading Terraform config..."

    echodebug "[DEBUG] Creating a new config version for $tfe_workspace"

    # The JSON Payload used to create the new configuration version
    config_ver_payload='{"data":{"type":"configuration-version"}}'

    echodebug "[DEBUG] Creating config version in workspace $workspace_id"

    # Creates the configuration version and extractes the upload-url
    url=$tfe_address/api/v2/workspaces/$workspace_id/configuration-versions

    echodebug "[DEBUG] URL: $url"

    upload_url_resp="$(tfe_api_call -d "$config_ver_payload" $url)"
    [ 0 -ne $? ] && { echoerr "Error creating config version"
                      cleanup "$config_payload"; exit 1; }

    echodebug "[DEBUG] Upload URL response:"
    echodebug "$upload_url_resp"

    config_id="$(printf "%s" "$upload_url_resp" | jq -r '.data.id')"
    [ 0 -ne $? ] && { echoerr "Error parsing API response for config ID"
                      cleanup "$config_payload"; exit 1; }
    echodebug "[DEBUG] Config ID: $config_id"

    # Perform the upload of the config archive to the upload URL
    (
        set -e
        url="$(printf "%s" "$upload_url_resp" | jq -r '.data.attributes."upload-url"')"
        echodebug "[DEBUG] Upload URL: $url"
        echodebug "[DEBUG] Uploading content to upload URL"

        upload_config_resp="$(curl -f $tfe_curl_silent -X PUT --data-binary "@$config_payload" ${url})"

        echodebug "[DEBUG] Upload config response:"
        echodebug "$upload_config_resp"
    ) 2>&3
    [ 0 -ne $? ] && { echoerr "Error uploading config archive"
                     cleanup "$config_payload"; exit 1; }

    cleanup "$config_payload"

    # Get the run ID using the config ID obtained earlier
    run_id="$( (
        set -e
        url=$tfe_address/api/v2/workspaces/$workspace_id/runs
        run_check_resp="$(tfe_api_call $url)"

        echodebug "[DEBUG] Run check response:"
        echodebug "$run_check_resp"

        run_id="$(printf "%s" "$run_check_resp" | jq -r '.data[] | select(.relationships."configuration-version".data.id == "'$config_id'") | .id')"

        echodebug "[DEBUG] Run ID: $run_id"

        test "$run_id"
        echo "$run_id"
    ) 2>&3 )"
    [ 0 -ne $? ] && { echoerr "Error obtaining run ID"; exit 1; }

    echo "Run $run_id submitted with config $config_id on $tfe_org/$tfe_workspace"

    # Repeatedly poll the system every N seconds specified with -poll to get
    # the run status until it reaches a non-active status. By default -poll is
    # 0 and there is no polling.
    (
        set -e
        run_status=pending
        lock_id=

        # Go until we don't see one of these states
        while [ 0 != "$poll_run" ] &&
                ( [ pending = "$run_status"   ] ||
                  [ planning = "$run_status"  ] ||
                  [ applying = "$run_status"  ] ||
                  [ confirmed = "$run_status" ] ); do
            # if the workspace was determined to be locked in the previous
            # poll, don't delay getting the final status and exiting.
            if [ true != "$workspace_locked" ]; then
                sleep $poll_run
            fi

            url=$tfe_address/api/v2/workspaces/$workspace_id/runs
            poll_run_resp=$(tfe_api_call $url)

            echodebug "[DEBUG] Poll run response:"
            echodebug "$poll_run_resp"

            run_status="$(printf "%s" "$poll_run_resp" | jq -r '.data[] | select(.id == "'$run_id'") | .attributes.status')"
            [ 0 -ne $? ] && continue

            echo "$run_status"

            echodebug "[DEBUG] Requesting workspace info for $tfe_org/$tfe_workspace"
            url="$tfe_address/api/v2/organizations/$tfe_org/workspaces/$tfe_workspace"
            workspace_info_resp="$(tfe_api_call "$url")"

            echodebug "[DEBUG] Workspace info response:"
            echodebug "$workspace_info_resp"

            workspace_locked="$(printf "%s" "$workspace_info_resp" | jq -r '.data.attributes.locked')"

            if [ true = "$workspace_locked" ]; then
                lock_id="$(printf "%s" "$workspace_info_resp" | jq -r '.data.relationships."locked-by".data.id')"
                if [ "$lock_id" != "$run_id" ]; then
                    echo "locked by $lock_id"
                    exit
                fi
            fi
        done
    ) 2>&3
    [ 0 -ne $? ] && { echoerr "Error polling run"; exit 1; }
)
